 line   address	contents
    1  00000000  20010051	addi r1, r0, #81
    2  00000004  20020009	addi r2, r0, #9
    3  00000008  0c000014	jal proc_iterative_division
    4  0000000c  54000000	nop
    5  00000010  54000000	nop
    6  00000014          	after_division_proc:
    7  00000014  08000068	j stop
    8  00000018  54000000	nop
    9  0000001c  54000000	nop
   12                      ; =====Procedure Iterative Division=====
   13                      ;Gets on r1,r2 dividend and divisor 
   14                      ;and store the result both in memory at address 0 and 
   15                      ;and on register r5
   17  00000020          	proc_iterative_division:
   18  00000020  00631826	xor r3, r3, r3
   19  00000024  54000000	nop
   20  00000028  54000000	nop
   21  0000002c  54000000	nop
   22  00000030          	divide:
   23  00000030  00222829	sne r5, r1, r2
   24  00000034  54000000	nop
   25  00000038  54000000	nop
   26  0000003c  10a0001c	beqz r5, finish
   27  00000040  54000000	nop
   28  00000044  54000000	nop
   29  00000048  00220822	sub r1, r1, r2
   30  0000004c  20630001	addi r3, r3, 1
   31  00000050  0bffffdc	j divide
   32  00000054  54000000	nop
   33  00000058  54000000	nop
   34  0000005c          	finish:
   35  0000005c  00012020	add r4, r0, r1
   36  00000060  54000000	nop
   37  00000064  54000000	nop
   38  00000068  54000000	nop
   39  0000006c  ac040000	sw 0(r0), r4
   40  00000070  8c050000	lw r5, 0(r0)
   41  00000074  0bffff9c	j after_division_proc
   42  00000078  54000000	nop
   43  0000007c  54000000	nop
   44                      ; =====End Procedure Iterative Division=====
   47  00000080          	stop: 
   48  00000080  0bfffffc	j stop
   49  00000084  54000000	nop
   50  00000088  54000000	nop
   51  0000008c  54000000	nop
